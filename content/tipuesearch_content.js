var tipuesearch = {"pages": [{'title': 'About', 'text': '個人倉儲\xa0 https://github.com/mdecycu/cmsite \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'Brython', 'text': "https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n", 'tags': '', 'url': 'Brython.html'}, {'title': '小組檔案', 'text': '', 'tags': '', 'url': '小組檔案.html'}, {'title': '圖片', 'text': '01 \n \n 02 \n \n 03 \n \n 04 \n \n 05 \n \n', 'tags': '', 'url': '圖片.html'}, {'title': '繪圖影片', 'text': 'pms繪圖過程 \n \n \n 電磁力吸引 \n \n \n \n', 'tags': '', 'url': '繪圖影片.html'}, {'title': 'W15', 'text': '繪圖過程: \n \n \n', 'tags': '', 'url': 'W15.html'}, {'title': 'Replit', 'text': '', 'tags': '', 'url': 'Replit.html'}, {'title': 'replit', 'text': '\n \n', 'tags': '', 'url': 'replit.html'}, {'title': 's1511', 'text': '', 'tags': '', 'url': 's1511.html'}, {'title': 'localhost', 'text': '', 'tags': '', 'url': 'localhost.html'}, {'title': '自我評分', 'text': '倉儲與網站評分項目: \n 60分 \n A: 是否 按照進度明確標示倉儲的改版歷程 \n 是 \n B: 是否根據 \xa0 IPv4 與 IPv6 \xa0 網路環境設定進行作法討論 \n 是 \n C: 是否就 \xa0 Replit、s.cycu.org 與 localhost \xa0 情境下對個人與分組倉儲進行設定操作 \n Replit、s1511.cycu.org 成功 \n D: 是否就所分配的 \xa0 CAD 套件 從安裝設定到繪圖提供內容參考 \n 安裝 SOLIDWORKS \n E: 是否使用所分配的 CAD 套件完成 專案一零組件繪圖 , 並提供零組件下載 \n 有 \n F: 是否將自行繪製的專案一零組件 轉入 CoppeliaSim \n 有 \n G: 是否利用 \xa0 ZMQ Remote API Python \xa0 對專案一轉入的零組件設定感測器, 並進行 鋼球永動模擬 \n 有,同小組進行 \n H: 是否實際操作 \xa0 Triangle 軌道系統 的鋼球永動模擬 \n 否 \n I: 是否完成 W15 的平面雙 U 迴路上的 鋼球永動系統繪圖、轉檔與系統模擬 \n 在step1 \n J: 是否使用所分配的 CAD 套件完成 專案二 1D 平台零組件繪圖 , 並提供零組件下載 \n 否 \n K: 是否利用 \xa0 ZMQ Remote API Python \xa0 對專案二轉入的零組件設定感測器, 並進行鋼球永動模擬 \n 否 \n L: 是否針對專案二的 1D 平台鋼球平衡系統所需的 \xa0 PID 控制理論 進行資料收集與 ChatGPT 對答 \n chatgpt: \n 在 PID（比例-積分-微分）控制理論中進行資料收集通常包括以下步驟： \n \n \n 系統建模：  首先，你需要了解和建立控制系統的數學模型。這可能涉及測量系統的輸入和輸出，然後使用數學方程式或其他模型建構技術，如系統識別，來擬合一個適當的模型。 \n \n \n 設計實驗：  確定你想要探討的控制系統的特定方面，並設計相應的實驗或測試。這可能包括特定輸入的應用，例如步階響應、方波響應或其他刺激。 \n \n \n 資料收集：  進行實驗或測試，並收集系統的輸入和輸出數據。這可能包括採樣過程，以確保獲得足夠的數據點來準確表示系統的行為。 \n \n \n 數據分析：  對收集的數據進行分析，例如計算系統的響應時間、穩定性和其他相關參數。這也可以包括使用數學工具來進行系統識別，以得到更好的模型。 \n \n \n PID 參數調整：  基於數據分析的結果，開始調整 PID 控制器的參數。這可能包括調整比例、積分和微分增益，以實現更好的控制效果。 \n \n \n 實時測試：  將調整後的 PID 控制器部署到實際系統中，並觀察實時控制效果。這可能需要進行進一步的調整，以使系統達到預期的性能。 \n \n \n 迭代和優化：  根據實時測試的結果，進行迭代和優化，不斷改進 PID 參數，直到達到滿意的控制效果。 \n \n \n 在每一步中，合理的實驗設計和數據分析是關鍵，以確保獲得可靠的結果並有效地進行 PID 控制的調整。 \n \n \n  啟動 Brython  \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n  add 1 to 100 開始  \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': '自我評分.html'}]};