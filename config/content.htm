<h1>About</h1>
<p>個人倉儲 <a href="https://github.com/mdecycu/cmsite">https://github.com/mdecycu/cmsite</a></p>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<h1>作業軟體</h1>
<h2>Onshape</h2>
<p>簡介:</p>
<p><b><span>Onshape</span></b><span><span>是一種電腦輔助設計</span></span><span><span>(CAD)軟體系統，透過軟體即服務</span></span><span><span>(SAAS) 模型透過網際網路提供</span><span>。</span><span>它廣泛利用雲端運算，在基於互聯網的伺服器上執行計算密集型處理和渲染，用戶可以透過網頁瀏覽器或iOS和Android應用程式與系統進行互動。</span></span></p>
<p><span><span>下載教學影片:</span></span></p>
<p><span><span></span></span></p>
<p><video autoplay="autoplay" controls="controls" height="150" name="media" width="300"><source src="https://s1511.cycu.org:8138/downloads/onshape%E6%95%99%E5%AD%B8%E5%BD%B1%E7%89%87.mp4" type="video/mp4"/></video></p><h2>Soildwork</h2>
<p>簡介:</p>
<pre class="tw-data-text tw-text-large tw-ta" data-placeholder="翻譯" data-ved="2ahUKEwij1Kv2xsaDAxX8h1YBHX4hCa4Q3ewLegQIBRAQ" dir="ltr"><span class="Y2IQFc" lang="zh-TW">SolidWorks是一款由Dassault Systèmes開發的三維電腦輔助設計（CAD）軟體。它專門用於建模、設計和製造<br/>各種機械和工程產品。SolidWorks提供了一個具有繪圖和功能強大的介面，讓使用者能夠建立複雜的三維模型並<br/>進行工程分析、渲染和動畫展示。

該軟體的特點之一是其用戶友好性，它採用了易於理解的介面和易於學習的工具，讓初學者和專業用戶都能夠快速<br/>上手。SolidWorks擁有廣泛的功能，包括各種建模工具、組裝設計、分析模擬、繪圖和文件化等功能，使得使用者<br/>可以在一個平台上完成整個產品設計的過程。

SolidWorks它廣泛應用於各個行業，如機械工程、汽車製造、航空航天、電子產品等。強大的性能和靈活性使工<br/>程師和設計師能夠快速、準確地熔化概念轉化為實際的產品，並進行必要的和測試改進。<br/><br/><br/><br/></span></pre>
<p><span>下載安裝 SOLIDWORKS 2022</span>:</p>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EY9GinJ2ns5Iiy-ih3-y9xwBdgl3H-ajMPZOIxZhd9Nssg?e=jP7Y4T">下載 SolidWorks 2022 安裝檔案</a><span> </span>(檔案大小 16GB, for @nfu users only, 請先根據安裝序號與認證主機在校園網路中或透過 VPN (從<span> </span><a href="https://ecare.nfu.edu.tw/">ecare 登入</a>申請) 連網, 必須完整安裝結束後, 再進行 service pack 更新)</p>
<p>安裝 SoildWorks 2022 過程畫面 (因為必須在校園內或使用 VPN 認證才能完成安裝, 因此以下直接顯示出 Serial Number 與認證主機 IP 位址):</p>
<p>下載後解開壓縮檔案, 執行 Setup.exe 進行安裝 (以::2 主機的安裝為例):</p>
<p></p>
<p><img alt="" height="353" src="https://mde.tw/cadnote/images/solidworks2022_installation_1.png" width="400"/></p>
<p>輸入安裝序號, 以下只安裝基本模組, 並沒有勾選其餘套件:</p>
<p><img alt="" height="353" src="https://mde.tw/cadnote/images/solidworks2022_installation_2.png" width="400"/></p>
<p><img alt="" height="353" src="https://mde.tw/cadnote/images/solidworks2022_installation_3.png" width="400"/></p>
<p>在安裝過程必須先安裝與序號對應的版本內容後再進行更新, 因此以下使用內定的否, 表示先不下載更新檔案:</p>
<p><img alt="" height="353" src="https://mde.tw/cadnote/images/solidworks2022_installation_4.png" width="400"/></p>
<p>勾選接受 SolidWorks 條款後進行安裝:</p>
<p><img alt="" height="353" src="https://mde.tw/cadnote/images/solidworks2022_installation_5.png" width="400"/></p>
<p>點選馬上安裝後,  會跳出認證伺服器的視窗表單, 必須輸入正確的認證埠號與 IPv4 位址才可進行安裝, 截至 2023.04.07, 校內的 SolidWorks 認證主機僅支援 IPv4 網路協定認證, 若希望取得認證的電腦僅啟動 IPv6 網路協定, 將無法取得認證授權.</p>
<p><img alt="" height="353" src="https://mde.tw/cadnote/images/solidworks2022_installation_6.png" width="400"/></p>
<p>接著按下確定後, 就可以進行漫長且容量達 20 GB 的 SolidWorks 安裝:</p>
<p><img alt="" height="353" src="https://mde.tw/cadnote/images/solidworks2022_installation_7.png" width="400"/></p>
<p>安裝完成之前, 會跳出下列視窗, 可以選擇不參加客戶經驗改進計畫, 或許能讓操作過程更加順暢:</p>
<p><img alt="" height="353" src="https://mde.tw/cadnote/images/solidworks2022_installation_8.png" width="400"/></p>
<p>最後按下完成鍵就可以執行 SolidWorks 2022 了.</p>
<p>啟動時顯示共有 500 個用戶可以同時連線:</p>
<p><img alt="" height="273" src="https://mde.tw/cadnote/images/solidworks2022_installation_9.png" width="400"/></p>
<p>啟動時必須允許 SolidWorks 通過公用網路防火牆:</p>
<p><img alt="" height="293" src="https://mde.tw/cadnote/images/solidworks2022_installation_10.png" width="400"/></p>
<p>而且必須接受 SolidWorks 的使用授權:</p>
<p><img alt="" height="293" src="https://mde.tw/cadnote/images/solidworks2022_installation_11.png" width="400"/></p>
<p>然後還要進行各模組的資料更新, 以下選擇更新所有模組:</p>
<p><img alt="" height="290" src="https://mde.tw/cadnote/images/solidworks2022_installation_12.png" width="400"/></p>
<p>更新完成後, 在開始選單中執行 SOLIDWORKS 2022, 然後同意使用授權:</p>
<p><img alt="" height="347" src="https://mde.tw/cadnote/images/solidworks2022_installation_13.png" width="400"/></p>
<p>終於可以使用這個佔用 20GB 硬碟資料的 SolidWorks 了:</p>
<p><img alt="" height="216" src="https://mde.tw/cadnote/images/solidworks2022_installation_14.png" width="400"/></p>
<pre class="tw-data-text tw-text-large tw-ta" data-placeholder="翻譯" data-ved="2ahUKEwij1Kv2xsaDAxX8h1YBHX4hCa4Q3ewLegQIBRAQ" dir="ltr" id="tw-target-text"><span class="Y2IQFc" lang="zh-TW">

無論是初學者還是經驗豐富的專業人士，SolidWorks都是一個功能強大且靈活的工具，可以幫助使用者實現他們的設計和製造目標。<br/></span></pre>
<p></p><h2>NX</h2>
<p>簡介:</p>
<div class="flex-1 overflow-hidden">
<div class="react-scroll-to-bottom--css-lsexp-79elbk h-full">
<div class="react-scroll-to-bottom--css-lsexp-1n7m0yu">
<div class="flex flex-col pb-9 text-sm">
<div class="w-full text-token-text-primary" data-testid="conversation-turn-7">
<div class="px-4 py-2 justify-center text-base md:gap-6 m-auto">
<div class="flex flex-1 text-base mx-auto gap-3 md:px-5 lg:px-1 xl:px-5 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem] group final-completion">
<div class="relative flex w-full flex-col lg:w-[calc(100%-115px)] agent-turn">
<div class="flex-col gap-1 md:gap-3">
<div class="flex flex-grow flex-col max-w-full">
<div class="min-h-[20px] text-message flex flex-col items-start gap-3 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto" data-message-author-role="assistant" data-message-id="32125ba8-4570-42e1-975e-e614bb8c8cf9">
<div class="markdown prose w-full break-words dark:prose-invert light">
<p>  NX CAD是由Siemens PLM Software開發的一個強大的電腦輔助設計（CAD）軟體。它提供了一個全面的工具集，用於設計、建模和製造產品。NX CAD能夠支援設計者在整個產品開發過程中進行各種任務，包括概念設計、工程設計、模擬、製造準備等。這個軟體具有強大的功能，可以幫助使用者建立複雜的三維模型、進行分析、測試產品性能，以及準備生產所需的數據和文件。NX CAD被廣泛應用於各種行業，如航空航天、汽車製造、工程等，幫助設計師和工程師創造出創新的產品。</p>
<p>下載教學影片:</p>
<p></p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<p><video autoplay="autoplay" controls="controls" height="150" name="media" width="300"><source src="https://s1511.cycu.org:8138/downloads/NX%E4%B8%8B%E8%BC%89%E5%BD%B1%E7%89%87%E6%95%99%E5%AD%B8.mp4" type="video/mp4"/></video></p><h1>小組檔案</h1>
<h2>圖片</h2>
<p>01</p>
<p><img alt="" height="429" src="/images/01.png" width="800"/></p>
<p>02</p>
<p><img alt="" height="429" src="/images/02.png" width="800"/></p>
<p>03</p>
<p><img alt="" height="430" src="/images/03.png" width="800"/></p>
<p>04</p>
<p><img alt="" height="429" src="/images/04.png" width="800"/></p>
<p>05</p>
<p><img alt="" height="469" src="/images/05.png" width="800"/></p>
<h2>繪圖影片</h2>
<p>pms繪圖過程</p>
<p><video __idm_id__="2007041" autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="winkVideoData_creo10" height="630" muted="true" width="1008">
<source src="./../downloads/%E7%B9%AA%E5%9C%96%E9%81%8E%E7%A8%8B.mp4"/></video></p>
<p>電磁力吸引</p>
<p></p>
<p><video __idm_id__="2007041" autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="winkVideoData_creo10" height="630" muted="true" width="1008">
<source src="./../downloads/%E9%9B%BB%E7%A3%81%E5%8A%9B%E5%90%B8%E5%BC%95.mp4"/></video></p>
<h1>W15</h1>
<!-- 導入 brython 程式庫 -->
<p>繪圖過程:</p>
<p><video __idm_id__="2007041" autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="winkVideoData_creo10" height="630" muted="true" width="1008">
<source src="./../downloads/w15%E7%B9%AA%E5%9C%96%E9%81%8E%E7%A8%8B.mp4"/></video></p>
<h1>Replit</h1>
<h2>replit</h2>
<p><video __idm_id__="2007041" autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="winkVideoData_creo10" height="630" muted="true" width="1008">
<source src="./../downloads/11254.mp4"/></video></p>
<h2>s1511</h2>
<h2>localhost</h2>
<h1>自我評分</h1>
<p><span>倉儲與網站評分項目:</span></p>
<p><span>60分</span></p>
<p><span>A: 是否<span>按照進度明確標示倉儲的改版歷程</span></span></p>
<p><span><span>是</span></span></p>
<p><span>B: 是否根據<span> </span><span>IPv4 與 IPv6</span><span> </span>網路環境設定進行作法討論</span></p>
<p><span>是</span></p>
<p><span>C: 是否就<span><span> </span>Replit、s.cycu.org 與 localhost</span><span> </span>情境下對個人與分組倉儲進行設定操作</span></p>
<p><span>Replit、s1511.cycu.org 成功</span></p>
<p><span>D: 是否就所分配的<span> </span><span>CAD 套件</span>從安裝設定到繪圖提供內容參考</span></p>
<p><span>安裝 SOLIDWORKS</span></p>
<p><span>E: 是否使用所分配的 CAD 套件完成<span>專案一零組件繪圖</span>, 並提供零組件下載</span></p>
<p><span>有</span></p>
<p><span>F: 是否將自行繪製的專案一零組件<span>轉入 CoppeliaSim</span></span></p>
<p><span><span>有</span></span></p>
<p><span>G: 是否利用<span> </span><span>ZMQ Remote API Python</span><span> </span>對專案一轉入的零組件設定感測器, 並進行<span>鋼球永動模擬</span></span></p>
<p><span><span>有,同小組進行</span></span></p>
<p><span>H: 是否實際操作<span> </span><span>Triangle 軌道系統</span>的鋼球永動模擬</span></p>
<p><span>否</span></p>
<p><span>I: 是否完成 W15 的平面雙 U 迴路上的<span>鋼球永動系統繪圖、轉檔與系統模擬</span></span></p>
<p><span><span>在step1</span></span></p>
<p><span>J: 是否使用所分配的 CAD 套件完成<span>專案二 1D 平台零組件繪圖</span>, 並提供零組件下載</span></p>
<p><span>否</span></p>
<p><span>K: 是否利用<span> </span><span>ZMQ Remote API Python</span><span> </span>對專案二轉入的零組件設定感測器, 並進行鋼球永動模擬</span></p>
<p><span>否</span></p>
<p><span>L: 是否針對專案二的 1D 平台鋼球平衡系統所需的<span> </span><span>PID 控制理論</span>進行資料收集與 ChatGPT 對答</span></p>
<p>chatgpt:</p>
<p>在 PID（比例-積分-微分）控制理論中進行資料收集通常包括以下步驟：</p>
<ol>
<li>
<p><strong>系統建模：</strong> 首先，你需要了解和建立控制系統的數學模型。這可能涉及測量系統的輸入和輸出，然後使用數學方程式或其他模型建構技術，如系統識別，來擬合一個適當的模型。</p>
</li>
<li>
<p><strong>設計實驗：</strong> 確定你想要探討的控制系統的特定方面，並設計相應的實驗或測試。這可能包括特定輸入的應用，例如步階響應、方波響應或其他刺激。</p>
</li>
<li>
<p><strong>資料收集：</strong> 進行實驗或測試，並收集系統的輸入和輸出數據。這可能包括採樣過程，以確保獲得足夠的數據點來準確表示系統的行為。</p>
</li>
<li>
<p><strong>數據分析：</strong> 對收集的數據進行分析，例如計算系統的響應時間、穩定性和其他相關參數。這也可以包括使用數學工具來進行系統識別，以得到更好的模型。</p>
</li>
<li>
<p><strong>PID 參數調整：</strong> 基於數據分析的結果，開始調整 PID 控制器的參數。這可能包括調整比例、積分和微分增益，以實現更好的控制效果。</p>
</li>
<li>
<p><strong>實時測試：</strong> 將調整後的 PID 控制器部署到實際系統中，並觀察實時控制效果。這可能需要進行進一步的調整，以使系統達到預期的性能。</p>
</li>
<li>
<p><strong>迭代和優化：</strong> 根據實時測試的結果，進行迭代和優化，不斷改進 PID 參數，直到達到滿意的控制效果。</p>
</li>
</ol>
<p>在每一步中，合理的實驗設計和數據分析是關鍵，以確保獲得可靠的結果並有效地進行 PID 控制的調整。</p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<p></p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
<!-- 導入 FileSaver 與 filereader -->
<p></p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
<!-- 導入 ace -->
<p></p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
<p></p>
<!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
<!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱-->
<p></p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
<p></p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
<p></p>
<!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>